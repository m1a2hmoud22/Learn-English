        // --- DOM Elements ---
        const levelSelectionScreen = document.getElementById('level-selection-screen');
        const gameScreen = document.getElementById('game-screen');
        const finalScoreScreen = document.getElementById('final-score-screen');
        const levelDisplay = document.getElementById('level-display');
        const scoreDisplay = document.getElementById('score-display');
        const timerContainer = document.getElementById('timer-container');
        const timerDisplay = document.getElementById('timer-display');
        const questionPrompt = document.getElementById('question-prompt');
        const wordDisplay = document.getElementById('word-display');
        const answerInput = document.getElementById('answer-input');
        const checkBtn = document.getElementById('check-btn');
        const messageArea = document.getElementById('message-area');
        const finalScoreDisplay = document.getElementById('final-score-display');
        const finalEmoji = document.getElementById('final-emoji');
        const finalTitle = document.getElementById('final-title');
        const finalMessage = document.getElementById('final-message');
        const darkModeToggle = document.getElementById('darkModeToggle');
        const rulesBtn = document.getElementById('rules-btn');
        const closeRulesBtn = document.getElementById('close-rules-btn');
        const rulesModal = document.getElementById('rules-modal');
        const rulesModalBackdrop = document.getElementById('rules-modal-backdrop');
        const levelsGrid = document.getElementById('levels-grid');

        // --- Game Data ---
        const words = {
            "ÿ≥ŸáŸÑ": { "ŸÇÿ∑ÿ©": "cat", "ŸÉŸÑÿ®": "dog", "ÿ¥ŸÖÿ≥": "sun", "ŸàŸÑÿØ": "boy", "ÿ®ŸÜÿ™": "girl", "ŸÉÿ™ÿßÿ®": "book", "ÿ≥Ÿäÿßÿ±ÿ©": "car", "ÿ™ŸÅÿßÿ≠ÿ©": "apple", "ŸÖÿßÿ°": "water", "ÿ®Ÿäÿ™": "house" },
            "ŸÖÿ™Ÿàÿ≥ÿ∑": { "ÿ≥ÿπŸäÿØ": "happy", "ŸÖÿØÿ±ÿ≥ÿ©": "school", "ÿµÿØŸäŸÇ": "friend", "ÿ∑ÿπÿßŸÖ": "food", "ÿπÿßÿ¶ŸÑÿ©": "family", "ŸäŸÑÿπÿ®": "play", "ŸÉÿ®Ÿäÿ±": "big", "ÿµÿ∫Ÿäÿ±": "small", "ÿ≤Ÿáÿ±ÿ©": "flower", "ÿ¥ÿ¨ÿ±ÿ©": "tree" },
            "ÿµÿπÿ®": { "ŸÉŸÖÿ®ŸäŸàÿ™ÿ±": "computer", "ŸÖÿπŸÑŸàŸÖÿßÿ™": "information", "ŸÖÿ≥ÿ™ÿ¥ŸÅŸâ": "hospital", "ŸÖÿ∫ÿßŸÖÿ±ÿ©": "adventure", "ŸÖŸÉÿ™ÿ®ÿ©": "library", "ÿ¨ŸÖŸäŸÑ": "beautiful", "ŸÇŸàÿ©": "strength", "ŸÖÿÆÿ™ŸÑŸÅ": "different", "ŸÖÿπÿ±ŸÅÿ©": "knowledge", "ÿ≠ŸÉŸàŸÖÿ©": "government" },
            "ÿ™ÿ≠ÿØŸä ÿßŸÑŸàŸÇÿ™": { "ŸÉŸÖÿ®ŸäŸàÿ™ÿ±": "computer", "ŸÖÿπŸÑŸàŸÖÿßÿ™": "information", "ŸÖÿ≥ÿ™ÿ¥ŸÅŸâ": "hospital", "ŸÖÿ∫ÿßŸÖÿ±ÿ©": "adventure", "ŸÖŸÉÿ™ÿ®ÿ©": "library", "ÿ¨ŸÖŸäŸÑ": "beautiful", "ŸÇŸàÿ©": "strength", "ŸÖÿÆÿ™ŸÑŸÅ": "different", "ŸÖÿπÿ±ŸÅÿ©": "knowledge", "ÿ≠ŸÉŸàŸÖÿ©": "government" }
        };
        const levelOrder = ["ÿ≥ŸáŸÑ", "ŸÖÿ™Ÿàÿ≥ÿ∑", "ÿµÿπÿ®", "ÿ™ÿ≠ÿØŸä ÿßŸÑŸàŸÇÿ™"];
        const levelThreshold = 80;
        const positiveFeedback = ["ÿ±ÿßÿ¶ÿπ! ‚ú®", "ÿ£ÿ≠ÿ≥ŸÜÿ™! üéâ", "ÿ•ÿ¨ÿßÿ®ÿ© ÿµÿ≠Ÿäÿ≠ÿ©! üëç", "ÿ£ŸÜÿ™ ŸÜÿ¨ŸÖ! üåü", "ŸÖÿ∞ŸáŸÑ! ü§©"];
        const encouragingFeedback = ["ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâÿå ÿ£ŸÜÿ™ ÿ™ÿ≥ÿ™ÿ∑Ÿäÿπ! üí™", "ŸÑÿß ÿ®ÿ£ÿ≥ÿå ŸÅŸÉÿ± ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ! ü§î", "ŸÇÿ±Ÿäÿ® ÿ¨ÿØŸãÿßÿå ÿ≠ÿßŸàŸÑ ŸÖÿ¨ÿØÿØŸãÿß! üéØ"];

        // --- Game State ---
        let currentLevel = '';
        let score = 0;
        let currentQuestions = [];
        let questionIndex = 0;
        let attempts = 0;
        let currentCorrectAnswer = '';
        let timerInterval;
        let timeLeft = 15;

        // --- Event Listeners ---
        checkBtn.addEventListener('click', checkAnswer);
        answerInput.addEventListener('keyup', (event) => { if (event.key === 'Enter') checkBtn.click(); });
        darkModeToggle.addEventListener('change', () => document.body.classList.toggle('dark'));
        rulesBtn.addEventListener('click', () => {
            rulesModal.classList.add('active');
            rulesModalBackdrop.classList.add('active');
        });
        closeRulesBtn.addEventListener('click', closeRulesModal);
        rulesModalBackdrop.addEventListener('click', closeRulesModal);

        function closeRulesModal() {
            rulesModal.classList.remove('active');
            rulesModalBackdrop.classList.remove('active');
        }

        // --- Game Initialization ---
        function init() {
            updateLevelsUI();
            levelsGrid.addEventListener('click', (e) => {
                const levelCard = e.target.closest('.level-card');
                if (levelCard && !levelCard.classList.contains('locked')) {
                    startGame(levelCard.dataset.level);
                }
            });
        }
        
        function updateLevelsUI() {
            const unlockedLevelIndex = levelOrder.indexOf(localStorage.getItem('unlockedLevel') || 'ÿ≥ŸáŸÑ');
            document.querySelectorAll('.level-card').forEach((card, index) => {
                const lockIcon = card.querySelector('.lock-icon');
                if (index > unlockedLevelIndex) {
                    card.classList.add('locked');
                    lockIcon.classList.remove('hidden');
                } else {
                    card.classList.remove('locked');
                    lockIcon.classList.add('hidden');
                }
            });
        }

        // --- Game Functions ---
        function startGame(level) {
            currentLevel = level;
            score = 0;
            questionIndex = 0;
            levelDisplay.textContent = level;
            scoreDisplay.textContent = score;
            
            timerContainer.classList.toggle('hidden', level !== 'ÿ™ÿ≠ÿØŸä ÿßŸÑŸàŸÇÿ™');

            const levelWords = words[level];
            currentQuestions = Object.entries(levelWords);
            shuffleArray(currentQuestions);

            levelSelectionScreen.classList.add('hidden');
            gameScreen.classList.remove('hidden');
            finalScoreScreen.classList.add('hidden');

            nextQuestion();
        }

        function nextQuestion() {
            if (questionIndex >= currentQuestions.length) {
                endGame();
                return;
            }
            clearInterval(timerInterval);
            attempts = 0;
            answerInput.value = '';
            answerInput.disabled = false;
            answerInput.focus();
            messageArea.textContent = '';
            wordDisplay.classList.remove('correct-answer', 'wrong-answer');
            checkBtn.disabled = false;

            const [arabicWord, englishWord] = currentQuestions[questionIndex];

            if (Math.random() < 0.5) {
                questionPrompt.textContent = `ŸÖÿß ŸáŸä ÿ™ÿ±ÿ¨ŸÖÿ© ŸÉŸÑŸÖÿ© '${arabicWord}' ÿ®ÿßŸÑÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿäÿ©ÿü`;
                wordDisplay.textContent = arabicWord;
                currentCorrectAnswer = englishWord;
            } else {
                questionPrompt.textContent = `ŸÖÿß ŸáŸä ÿ™ÿ±ÿ¨ŸÖÿ© ŸÉŸÑŸÖÿ© '${englishWord}' ÿ®ÿßŸÑÿπÿ±ÿ®Ÿäÿ©ÿü`;
                wordDisplay.textContent = englishWord;
                currentCorrectAnswer = arabicWord;
            }

            if (currentLevel === 'ÿ™ÿ≠ÿØŸä ÿßŸÑŸàŸÇÿ™') startTimer();
        }

        function startTimer() {
            timeLeft = 15;
            timerDisplay.textContent = timeLeft;
            timerInterval = setInterval(() => {
                timeLeft--;
                timerDisplay.textContent = timeLeft;
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    handleTimeUp();
                }
            }, 1000);
        }
        
        function handleTimeUp() {
            messageArea.innerHTML = `ÿßŸÜÿ™ŸáŸâ ÿßŸÑŸàŸÇÿ™! ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ŸáŸä: <span class="font-bold text-red-500">${currentCorrectAnswer}</span>`;
            messageArea.style.color = '#EF4444';
            answerInput.disabled = true;
            checkBtn.disabled = true;
            questionIndex++;
            setTimeout(nextQuestion, 3000);
        }

        function checkAnswer() {
            const userAnswer = answerInput.value.trim().toLowerCase();
            if (!userAnswer) return;
            clearInterval(timerInterval);
            if (userAnswer === currentCorrectAnswer.toLowerCase()) handleCorrectAnswer();
            else handleWrongAnswer();
        }

        function handleCorrectAnswer() {
            score += (currentLevel === 'ÿ™ÿ≠ÿØŸä ÿßŸÑŸàŸÇÿ™' || attempts === 0) ? 10 : 5;
            scoreDisplay.textContent = score;
            messageArea.textContent = randomChoice(positiveFeedback);
            messageArea.style.color = '#10B981';
            wordDisplay.classList.add('correct-answer');
            answerInput.disabled = true;
            checkBtn.disabled = true;
            questionIndex++;
            setTimeout(nextQuestion, 1500);
        }
        
        function handleWrongAnswer() {
            attempts++;
            wordDisplay.classList.add('wrong-answer');
            setTimeout(() => wordDisplay.classList.remove('wrong-answer'), 500);

            if (currentLevel === 'ÿ™ÿ≠ÿØŸä ÿßŸÑŸàŸÇÿ™' || attempts >= 2) {
                messageArea.innerHTML = `ŸÑŸÑÿ£ÿ≥ŸÅ! ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿßŸÑÿµÿ≠Ÿäÿ≠ÿ© ŸáŸä: <span class="font-bold text-red-500">${currentCorrectAnswer}</span>`;
                messageArea.style.color = '#EF4444';
                answerInput.disabled = true;
                checkBtn.disabled = true;
                questionIndex++;
                setTimeout(nextQuestion, 3000);
            } else {
                messageArea.textContent = randomChoice(encouragingFeedback);
                messageArea.style.color = '#F59E0B';
                answerInput.value = '';
                answerInput.focus();
            }
        }

        function endGame() {
            const currentLevelIndex = levelOrder.indexOf(currentLevel);
            const unlockedLevelIndex = levelOrder.indexOf(localStorage.getItem('unlockedLevel') || 'ÿ≥ŸáŸÑ');
            
            // Check for unlocking the next level
            if (score >= levelThreshold && currentLevelIndex < levelOrder.length - 1 && currentLevelIndex >= unlockedLevelIndex) {
                 const nextLevel = levelOrder[currentLevelIndex + 1];
                 localStorage.setItem('unlockedLevel', nextLevel);
                 finalEmoji.textContent = 'üèÜ';
                 finalTitle.textContent = 'ÿ™ŸáÿßŸÜŸäŸÜÿß!';
                 finalMessage.textContent = `ŸÑŸÇÿØ ŸÅÿ™ÿ≠ÿ™ ŸÇŸÅŸÑ ÿßŸÑŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿ™ÿßŸÑŸä: ${nextLevel}!`;
            } else {
                 finalEmoji.textContent = 'üéâ';
                 finalTitle.textContent = 'ÿ£ÿØÿßÿ° ÿ±ÿßÿ¶ÿπ!';
                 finalMessage.textContent = 'ŸÑŸÇÿØ ÿ£ŸÉŸÖŸÑÿ™ ÿßŸÑŸÖÿ≥ÿ™ŸàŸâ ÿ®ŸÜÿ¨ÿßÿ≠.';
            }

            gameScreen.classList.add('hidden');
            finalScoreScreen.classList.remove('hidden');
            finalScoreDisplay.textContent = score;
        }

        function playAgain() {
            finalScoreScreen.classList.add('hidden');
            levelSelectionScreen.classList.remove('hidden');
            updateLevelsUI();
        }

        // --- Helper Functions ---
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }
        function randomChoice(array) {
            return array[Math.floor(Math.random() * array.length)];
        }
        
        // --- Start the app ---
        init();